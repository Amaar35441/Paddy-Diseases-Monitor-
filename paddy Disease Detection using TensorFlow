{"cells":[{"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = ':https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F268405%2F558442%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20241007%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20241007T110422Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3c615dcc9a18d6239965fc5125e3738d433f82870f3ee48cb626263b6adabb222c4a51f9e120e1081bb1185cc0ffda5f1e42de9f8aa58783b983cf33f4a7f80d9d9ea67a8d6ac96312f6c985aa840522620d3581fc8211a2c1a384ce95c27e3f7ace9d5e907f564e04167b476e5aff21cf30f91a672f7402cbf8342e2b4b285a79b8a7096541f09aba32837ac643765899ebd82d89d586769cc36b971350c5f65ce3baedf07d2924862bb63fa9908a92e1c3c4b033505f38fb12072492e1c8b2cf7e878739ad816c5e0a7defa8b0957ebb93757f1dc23df9ab681d65c8a143aa2c402d12358e4ee2daf43f4923dada67cbd687ad543d16aeac697d0cd84c9fbc'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yXXkD0J3pwqJ","executionInfo":{"status":"ok","timestamp":1728300743466,"user_tz":420,"elapsed":1439162,"user":{"displayName":"","userId":""}},"outputId":"21b47c21-2e55-4efe-9ec4-d4bfd10f2fd2"},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Downloading , 15978875144 bytes compressed\n","[==================================================] 15978875144 bytes downloaded\n","Downloaded and uncompressed: \n","Data source import complete.\n"]}],"execution_count":null},{"metadata":{"id":"Vs4nK1fppwqN"},"cell_type":"markdown","source":["# Rice Crop Disease Detection using TensorFlow\n","\n","## Table of Contents\n","- [Importing Libraries](#ImportingLibraries)\n","- [Loading Dataset](#LoadingDataset)\n","- [Resizing Image](#Resize)\n","- [Split into Training and Validation](#Split)\n","- [Image Count](#ImageCount)\n","- [Viewing Images](#ViewingImages)\n","    - [BrownSpot](#BrownSpot)\n","    - [Healthy](#Healthy)\n","    - [Hispa](#Hispa)\n","    - [LeafBlast](#LeafBlast)\n","- [Data Augmentation and Generators](#DataAugAndGen)\n","- [Callback](#Callback)\n","- [Models](#Models)\n","    - [1. Model - Conv2D](#Conv2D)\n","        - [Metrics](#MetricsConv2D)\n","        - [Observing the Convolutions](#ObservingConv2D)\n","    - [2. Model - InceptionV3](#InceptionV3)\n","        - [Metrics](#MetricInceptionv3)\n","    - [3. Model - EfficientNet](#EfficientNet)\n","        - [Metrics](#MetricsEfficientv2)\n","- [Export as TensorFlow LITE](#TFLITE)"]},{"metadata":{"id":"_op9TZcepwqP"},"cell_type":"markdown","source":["# Importing Libraries <a name=\"ImportingLibraries\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"drTALl4ZpwqQ","executionInfo":{"status":"ok","timestamp":1728300765145,"user_tz":420,"elapsed":11973,"user":{"displayName":"","userId":""}},"outputId":"bea6b4e3-65a6-40e6-f241-85ef065c6d02"},"cell_type":"code","source":["from __future__ import absolute_import, division, print_function, unicode_literals\n","\n","import tensorflow as tf\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import numpy as np # linear algebra\n","import tensorflow_hub as hub\n","import os\n","\n","from tensorflow.keras import Model\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras import layers\n","from keras import optimizers\n","\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    print('Device:', tpu.master())\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n","except:\n","    strategy = tf.distribute.get_strategy()\n","print('Number of replicas:', strategy.num_replicas_in_sync)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of replicas: 1\n"]}]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"q9iMZivMpwqR","executionInfo":{"status":"ok","timestamp":1728300773885,"user_tz":420,"elapsed":404,"user":{"displayName":"","userId":""}},"outputId":"8667c9c7-13c6-42e2-f9de-2c8e501b5b41"},"cell_type":"code","source":["print(\"Version \", tf.__version__)\n","print(\"Eager mode:\", tf.executing_eagerly())\n","print(\"Hub version: \", hub.__version__)\n","print(\"GPU is\",\"available\" if tf.test.is_gpu_available() else\"Not Available\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From <ipython-input-3-2b9eb71e9dba>:4: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.config.list_physical_devices('GPU')` instead.\n"]},{"output_type":"stream","name":"stdout","text":["Version  2.17.0\n","Eager mode: True\n","Hub version:  0.16.1\n","GPU is Not Available\n"]}]},{"metadata":{"id":"XcNDY_QBpwqR"},"cell_type":"markdown","source":["# Loading Dataset <a name=\"LoadingDataset\"></a>"]},{"metadata":{"trusted":true,"id":"HFSuBwvzpwqS"},"cell_type":"code","source":["#!/usr/bin/python\n","\n","import os, sys\n","\n","# Create new Train and val folders\n","\n","base_dir = 'kaggle/input/RiceLeafs'\n","train_path = '/kaggle/input/RiceLeafs/train'\n","val_path = 'kaggle/input/RiceLeafs/validation/'\n","\n","column_names = os.listdir(train_path)\n","for i in column_names:\n","    os.makedirs(f'../kaggle/output/train/{i}')\n","    os.makedirs(f'../kaggle/output/validation/{i}')\n","\n","out_path = '../kaggle/output/train/'\n","\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"id":"fg8otdbxpwqT"},"cell_type":"markdown","source":["# Resizing Image [OPTIONAL]  <a name=\"Resize\"></a>"]},{"metadata":{"trusted":true,"id":"r0mxnp9ApwqU"},"cell_type":"code","source":["from PIL import Image\n","def resize(input_path,folder,column_name):\n","    dirs = os.listdir(input_path)\n","    for item in dirs:\n","        item_path = input_path +'/' +item\n","        if os.path.isfile(item_path):\n","            #print('CHECK')\n","            im = Image.open(item_path)\n","\n","            # Check whether the specified\n","            # path exists or not\n","            outpath = f'/kaggle/kaggle/output/{folder}/{column_name}'\n","            temp_out_path = outpath+'/'+item\n","            f, e = os.path.splitext(temp_out_path)\n","\n","            imResize = im.resize((255,255), Image.ANTIALIAS)\n","            #print('CHECK 3')\n","            imResize.save(f + '.jpg', 'JPEG', quality=90)\n","\n","\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"DmLhhZfTpwqU","executionInfo":{"status":"ok","timestamp":1728301584704,"user_tz":420,"elapsed":511534,"user":{"displayName":"","userId":""}},"outputId":"6562e8d9-d040-4ada-a519-03064dafc683"},"cell_type":"code","source":["from PIL import Image\n","import os\n","\n","def resize(input_path, folder, column_name):\n","    # Define the output directory path\n","    output_dir = f'../output/{folder}/{column_name}/'\n","\n","    # Create the directory if it does not exist\n","    os.makedirs(output_dir, exist_ok=True)\n","\n","    # Loop over all files in the input directory\n","    for item in os.listdir(input_path):\n","        if item.endswith('.jpg'):\n","            # Open the image\n","            img = Image.open(os.path.join(input_path, item))\n","\n","            # Resize the image\n","            img_resized = img.resize((255, 255), Image.Resampling.LANCZOS)\n","\n","            # Save the resized image to the output directory\n","            output_path = os.path.join(output_dir, item)\n","            img_resized.save(output_path, 'JPEG', quality=90)\n","\n","# Calling resize function for each class\n","input_path = '../input/RiceLeafs/train/Healthy'\n","resize(input_path, 'train', 'Healthy')\n","\n","input_path = '../input/RiceLeafs/train/BrownSpot'\n","resize(input_path, 'train', 'BrownSpot')\n","\n","input_path = '../input/RiceLeafs/train/Hispa'\n","resize(input_path, 'train', 'Hispa')\n","\n","input_path = '../input/RiceLeafs/train/LeafBlast'\n","resize(input_path, 'train', 'LeafBlast')\n","\n","print('Done with train resizing')\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Done with train resizing\n"]}]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"pZLHzpEOpwqV","executionInfo":{"status":"ok","timestamp":1728301711160,"user_tz":420,"elapsed":113348,"user":{"displayName":"","userId":""}},"outputId":"b3de78aa-232e-48bf-f47b-aa039a42d119"},"cell_type":"code","source":["## VALIDATION\n","input_path = '../input/RiceLeafs/validation/Healthy'\n","folder = 'validation'\n","column_name = 'Healthy'\n","resize(input_path,folder,column_name)\n","\n","input_path = '../input/RiceLeafs/validation/BrownSpot'\n","folder = 'validation'\n","column_name = 'BrownSpot'\n","resize(input_path,folder,column_name)\n","\n","input_path = '../input/RiceLeafs/validation/Hispa'\n","folder = 'validation'\n","column_name = 'Hispa'\n","resize(input_path,folder,column_name)\n","\n","input_path = '../input/RiceLeafs/validation/LeafBlast'\n","folder = 'validation'\n","column_name = 'LeafBlast'\n","resize(input_path,folder,column_name)\n","\n","print('Done with Validation resizing')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Done with Validation resizing\n"]}]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"UzaFqpWppwqV","executionInfo":{"status":"ok","timestamp":1728301733652,"user_tz":420,"elapsed":1202,"user":{"displayName":"","userId":""}},"outputId":"43a91059-2db7-4305-d2c2-99937e07c982"},"cell_type":"code","source":["os.path.exists('/kaggle/kaggle/output/validation/Healthy/')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":12}]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"9IB1LRs_pwqW","executionInfo":{"status":"ok","timestamp":1728301742992,"user_tz":420,"elapsed":595,"user":{"displayName":"","userId":""}},"outputId":"5cb316f6-246f-4093-877e-6fa8c8c2e373"},"cell_type":"code","source":["os.path.exists('/kaggle/kaggle/output/train/')\n","os.path.exists('/kaggle/kaggle/output/validation/')\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":13}]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"vjWfV9USpwqW","executionInfo":{"status":"ok","timestamp":1728302079546,"user_tz":420,"elapsed":392,"user":{"displayName":"","userId":""}},"outputId":"21b7aa25-eb61-4592-b9e5-f813b7d2849d"},"cell_type":"code","source":["import os\n","\n","# Check and create the output directory if it doesn't exist\n","output_dir = '/kaggle/kaggle/output/train/BrownSpot/'\n","os.makedirs(output_dir, exist_ok=True)\n","\n","# Now you can safely use os.listdir or save files\n","if os.path.exists(output_dir):\n","    print(f\"Directory exists: {output_dir}\")\n","    files = os.listdir(output_dir)\n","    print(f\"Files in {output_dir}: {files}\")\n","else:\n","    print(f\"Directory does not exist: {output_dir}\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Directory exists: /kaggle/kaggle/output/train/BrownSpot/\n","Files in /kaggle/kaggle/output/train/BrownSpot/: []\n"]}]},{"metadata":{"trusted":true,"id":"Aml__EXmpwqW"},"cell_type":"code","source":["data_dir = os.path.join(os.path.dirname('/kaggle/kaggle/'), 'output')"],"execution_count":null,"outputs":[]},{"metadata":{"id":"8niv-rQqpwqW"},"cell_type":"markdown","source":["# Split into Training and Validation  <a name=\"Split\"></a>"]},{"metadata":{"trusted":true,"id":"vRc6ujYDpwqX"},"cell_type":"code","source":["# Use this if you avoided the resizing\n","data_dir = os.path.join(os.path.dirname('/output/'), 'RiceLeafs')"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"NHYL_guapwqX"},"cell_type":"code","source":["train_dir = os.path.join(data_dir, 'train')\n","train_BrownSpot_dir = os.path.join(train_dir, 'BrownSpot')\n","train_Healthy_dir = os.path.join(train_dir, 'Healthy')\n","train_Hispa_dir = os.path.join(train_dir, 'Hispa')\n","train_LeafBlast_dir = os.path.join(train_dir, 'LeafBlast')\n","\n","\n","validation_dir = os.path.join(data_dir, 'validation')\n","validation_BrownSpot_dir = os.path.join(validation_dir, 'BrownSpot')\n","validation_Healthy_dir = os.path.join(validation_dir, 'Healthy')\n","validation_Hispa_dir = os.path.join(validation_dir, 'Hispa')\n","validation_LeafBlast_dir = os.path.join(validation_dir, 'LeafBlast')"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"7PfwAAJ1pwqX","executionInfo":{"status":"ok","timestamp":1728302961228,"user_tz":420,"elapsed":698,"user":{"displayName":"","userId":""}},"outputId":"bd0d592e-ddf7-4239-86c2-e2ab92b0f3f3"},"cell_type":"code","source":["import os\n","\n","# Define your directory paths\n","train_BrownSpot_dir = '/output/RiceLeafs/train/BrownSpot/'\n","train_Healthy_dir = '/output/RiceLeafs/train/Healthy/'\n","train_Hispa_dir = '/output/RiceLeafs/train/Hispa/'\n","train_LeafBlast_dir = '/output/RiceLeafs/train/LeafBlast/'\n","\n","# Create directories if they don't exist\n","os.makedirs(train_BrownSpot_dir, exist_ok=True)\n","os.makedirs(train_Healthy_dir, exist_ok=True)\n","os.makedirs(train_Hispa_dir, exist_ok=True)\n","os.makedirs(train_LeafBlast_dir, exist_ok=True)\n","\n","# Now check if directories exist and list the contents\n","try:\n","    train_BrownSpot_names = os.listdir(train_BrownSpot_dir)\n","    print(\"BrownSpot files:\", train_BrownSpot_names[:10])\n","except FileNotFoundError:\n","    print(f\"Directory does not exist: {train_BrownSpot_dir}\")\n","\n","try:\n","    train_Healthy_names = os.listdir(train_Healthy_dir)\n","    print(\"Healthy files:\", train_Healthy_names[:10])\n","except FileNotFoundError:\n","    print(f\"Directory does not exist: {train_Healthy_dir}\")\n","\n","try:\n","    train_Hispa_names = os.listdir(train_Hispa_dir)\n","    print(\"Hispa files:\", train_Hispa_names[:10])\n","except FileNotFoundError:\n","    print(f\"Directory does not exist: {train_Hispa_dir}\")\n","\n","try:\n","    train_LeafBlast_names = os.listdir(train_LeafBlast_dir)\n","    print(\"LeafBlast files:\", train_LeafBlast_names[:10])\n","except FileNotFoundError:\n","    print(f\"Directory does not exist: {train_LeafBlast_dir}\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["BrownSpot files: []\n","Healthy files: []\n","Hispa files: []\n","LeafBlast files: []\n"]}]},{"metadata":{"id":"Pzvs4udepwqX"},"cell_type":"markdown","source":["## Image Count <a name=\"ImageCount\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"CmE8lv9lpwqX","executionInfo":{"status":"ok","timestamp":1728302975309,"user_tz":420,"elapsed":598,"user":{"displayName":"","userId":""}},"outputId":"083213ae-2a9c-40e7-a4cc-6c731c1941ce"},"cell_type":"code","source":["\n","import time\n","import os\n","from os.path import exists\n","\n","def count(dir, counter=0):\n","    \"returns number of files in dir and subdirs\"\n","    for pack in os.walk(dir):\n","        for f in pack[2]:\n","            counter += 1\n","    return dir + \" : \" + str(counter) + \" files\"\n","\n","print('total images for training :', count(train_dir))\n","print('total images for validation :', count(validation_dir))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total images for training : /output/RiceLeafs/train : 0 files\n","total images for validation : /output/RiceLeafs/validation : 0 files\n"]}]},{"cell_type":"code","source":["import os\n","\n","def count_files_in_directory(directory):\n","    counter = 0\n","    for root, dirs, files in os.walk(directory):\n","        counter += len([f for f in files if f.endswith(('.jpg', '.png', '.jpeg'))])  # Count image files\n","    return f\"{directory}: {counter} image files\"\n","\n","# Define your training and validation directories\n","train_dir = '/kaggle/input/RiceLeafs/train/'  # Update with the correct path\n","validation_dir = '/kaggle/input/RiceLeafs/validation/'  # Update with the correct path\n","\n","# Check contents and count files\n","if os.path.exists(train_dir) and os.path.isdir(train_dir):\n","    print('Contents of training directory:', os.listdir(train_dir))\n","    print('Total images for training:', count_files_in_directory(train_dir))\n","else:\n","    print(f\"Training directory does not exist or is not a directory: {train_dir}\")\n","\n","if os.path.exists(validation_dir) and os.path.isdir(validation_dir):\n","    print('Contents of validation directory:', os.listdir(validation_dir))\n","    print('Total images for validation:', count_files_in_directory(validation_dir))\n","else:\n","    print(f\"Validation directory does not exist or is not a directory: {validation_dir}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sdujxczA5A2x","executionInfo":{"status":"ok","timestamp":1728303080783,"user_tz":420,"elapsed":594,"user":{"displayName":"","userId":""}},"outputId":"41c0013f-0328-4e26-ace3-feea7e3a9685"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Contents of training directory: ['Hispa', 'LeafBlast', 'BrownSpot', 'Healthy']\n","Total images for training: /kaggle/input/RiceLeafs/train/: 2684 image files\n","Contents of validation directory: ['Hispa', 'LeafBlast', 'BrownSpot', 'Healthy']\n","Total images for validation: /kaggle/input/RiceLeafs/validation/: 671 image files\n"]}]},{"metadata":{"id":"kfYGig5rpwqY"},"cell_type":"markdown","source":["## Viewing Images  <a name=\"ViewingImages\"></a>"]},{"metadata":{"trusted":true,"id":"cOlYuqL1pwqY"},"cell_type":"code","source":["%matplotlib inline\n","\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","\n","\n","# Parameters for our graph; we'll outpu images in a 4x4 configuration\n","nrows = 4\n","ncols = 4\n","\n","# for iternating over images\n","pic_index = 0"],"execution_count":null,"outputs":[]},{"metadata":{"id":"ByBF_KrapwqY"},"cell_type":"markdown","source":["### BrownSpot <a name=\"BrownSpot\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"9gkzlF95pwqY","executionInfo":{"status":"ok","timestamp":1728303111074,"user_tz":420,"elapsed":440,"user":{"displayName":"","userId":""}},"outputId":"d9968ebb-6063-4030-c9af-09b413b61282"},"cell_type":"code","source":["# Set up matplotlib fig, and size it to fit 4x4 pics\n","\n","fig = plt.gcf()\n","fig.set_size_inches(ncols *4, nrows*4)\n","\n","pic_index += 8\n","next_BrownSpot_pix = [os.path.join(train_BrownSpot_dir, fname)\n","                for fname in train_BrownSpot_names[pic_index-8:pic_index]]\n","for i, img_path in enumerate(next_BrownSpot_pix):\n","  # Set up subplot; subplot indices start at 1\n","  sp = plt.subplot(nrows,ncols,i +1)\n","  #sp.axis('Off') # Don't show axes (or gridlines)\n","\n","  img = mpimg.imread(img_path)\n","  plt.imshow(img)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1600 with 0 Axes>"]},"metadata":{}}]},{"metadata":{"id":"S3usve2ypwqY"},"cell_type":"markdown","source":["### Healthy <a name=\"Healthy\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"MX1Sx8whpwqZ","executionInfo":{"status":"ok","timestamp":1728303121485,"user_tz":420,"elapsed":428,"user":{"displayName":"","userId":""}},"outputId":"ed5d5494-5178-432f-cb1a-1aff1569d36c"},"cell_type":"code","source":["# Set up matplotlib fig, and size it to fit 4x4 pics\n","\n","fig = plt.gcf()\n","fig.set_size_inches(ncols *4, nrows*4)\n","\n","pic_index += 8\n","next_Healthy_pix = [os.path.join(train_Healthy_dir, fname)\n","                for fname in train_Healthy_names[pic_index-8:pic_index]]\n","\n","\n","for i, img_path in enumerate(next_Healthy_pix):\n","  # Set up subplot; subplot indices start at 1\n","  sp = plt.subplot(nrows,ncols,i +1)\n","  #sp.axis('Off') # Don't show axes (or gridlines)\n","\n","  img = mpimg.imread(img_path)\n","  plt.imshow(img)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1600 with 0 Axes>"]},"metadata":{}}]},{"metadata":{"id":"qp7HcugUpwqZ"},"cell_type":"markdown","source":["### Hispa <a name=\"Hispa\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"wGlUFBBppwqZ","executionInfo":{"status":"ok","timestamp":1728303171362,"user_tz":420,"elapsed":419,"user":{"displayName":"","userId":""}},"outputId":"21805571-2450-4fbc-dea4-e20a0b9d70db"},"cell_type":"code","source":["# Set up matplotlib fig, and size it to fit 4x4 pics\n","\n","fig = plt.gcf()\n","fig.set_size_inches(ncols *4, nrows*4)\n","\n","pic_index += 8\n","\n","next_Hispa_pix = [os.path.join(train_Hispa_dir, fname)\n","                for fname in train_Hispa_names[pic_index-8:pic_index]]\n","\n","\n","for i, img_path in enumerate(next_Hispa_pix):\n","  # Set up subplot; subplot indices start at 1\n","  sp = plt.subplot(nrows,ncols,i +1)\n","  #sp.axis('Off') # Don't show axes (or gridlines)\n","\n","  img = mpimg.imread(img_path)\n","  plt.imshow(img)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1600 with 0 Axes>"]},"metadata":{}}]},{"metadata":{"id":"WN_gnC73pwqZ"},"cell_type":"markdown","source":["### LeafBlast <a name=\"LeafBlast\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"PV4Hc-yQpwqd","executionInfo":{"status":"ok","timestamp":1728303176825,"user_tz":420,"elapsed":425,"user":{"displayName":"","userId":""}},"outputId":"09efe4f0-ae3e-41e7-ed3b-7a50aad46e00"},"cell_type":"code","source":["# Set up matplotlib fig, and size it to fit 4x4 pics\n","\n","fig = plt.gcf()\n","fig.set_size_inches(ncols *4, nrows*4)\n","\n","pic_index += 8\n","\n","next_LeafBlast_pix = [os.path.join(train_LeafBlast_dir, fname)\n","                for fname in train_LeafBlast_names[pic_index-8:pic_index]]\n","\n","for i, img_path in enumerate(next_LeafBlast_pix):\n","  # Set up subplot; subplot indices start at 1\n","  sp = plt.subplot(nrows,ncols,i +1)\n","  #sp.axis('Off') # Don't show axes (or gridlines)\n","\n","  img = mpimg.imread(img_path)\n","  plt.imshow(img)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1600 with 0 Axes>"]},"metadata":{}}]},{"metadata":{"id":"woykZKmEpwqe"},"cell_type":"markdown","source":["# Data Augmentation and Generators <a name=\"DataAugAndGen\"></a>"]},{"metadata":{"trusted":true,"id":"8IbYD2ecpwqe"},"cell_type":"code","source":["IMAGE_SHAPE = (244, 244)\n","BATCH_SIZE = 64 #@param {type:\"integer\"}"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"EXFT5t_wpwqe","executionInfo":{"status":"ok","timestamp":1728303183840,"user_tz":420,"elapsed":500,"user":{"displayName":"","userId":""}},"outputId":"abe903ee-0aaa-48c2-9341-540994a92fee"},"cell_type":"code","source":["# Inputs are suitably resized for the selected module. Dataset augmentation (i.e., random distortions of an image each time it is read) improves training, esp. when fine-tuning.\n","\n","validation_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)\n","validation_generator = validation_datagen.flow_from_directory(\n","    validation_dir,\n","    shuffle=False,\n","    seed=42,\n","    color_mode=\"rgb\",\n","    class_mode=\"categorical\",\n","    target_size=IMAGE_SHAPE,\n","    batch_size=BATCH_SIZE)\n","\n","do_data_augmentation = True #@param {type:\"boolean\"}\n","if do_data_augmentation:\n","  train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n","      rescale = 1./255,\n","      rotation_range=40,\n","      horizontal_flip=True,\n","      width_shift_range=0.2,\n","      height_shift_range=0.2,\n","      shear_range=0.2,\n","      zoom_range=0.2,\n","      fill_mode='nearest' )\n","else:\n","  train_datagen = validation_datagen\n","\n","train_generator = train_datagen.flow_from_directory(\n","    train_dir,\n","    shuffle=True,\n","    seed=42,\n","    color_mode=\"rgb\",\n","    class_mode=\"categorical\",\n","    target_size=IMAGE_SHAPE,\n","    batch_size=BATCH_SIZE)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 671 images belonging to 4 classes.\n","Found 2684 images belonging to 4 classes.\n"]}]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"yggxKZILpwqe","executionInfo":{"status":"ok","timestamp":1728303192280,"user_tz":420,"elapsed":561,"user":{"displayName":"","userId":""}},"outputId":"750b9387-46b6-4eb6-83bf-43087bd7f599"},"cell_type":"code","source":["train_generator.num_classes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":36}]},{"metadata":{"id":"o5ftxM4upwqg"},"cell_type":"markdown","source":["## Callback <a name=\"Callback\"></a>"]},{"metadata":{"trusted":true,"id":"cWAqvJJ5pwqg"},"cell_type":"code","source":["class MyCallback(tf.keras.callbacks.Callback):\n","  def on_epoch_end(self,epoch,log = {}):\n","    if(log.get('accuracy')> 0.99):\n","      if(log.get('val_accuracy')>0.99):\n","        print(\"\\n Reached 99% Accuracy for both train and val.\")\n","        self.model.stop_training = True\n","\n","callbacks = MyCallback()"],"execution_count":null,"outputs":[]},{"metadata":{"id":"rYffe775pwqg"},"cell_type":"markdown","source":["# Models <a name=\"Model\"></a>"]},{"metadata":{"id":"V0aK6fXlpwqg"},"cell_type":"markdown","source":["### 1. Model - Conv2D <a name=\"Conv2D\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"2tJDxvSxpwqm","executionInfo":{"status":"ok","timestamp":1728303200677,"user_tz":420,"elapsed":597,"user":{"displayName":"","userId":""}},"outputId":"568de63d-2e3b-4e7c-eac6-80eb05dc80fe"},"cell_type":"code","source":["\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Conv2D(16,(3,3),activation = 'relu',input_shape = (244,244,3)),\n","    tf.keras.layers.MaxPooling2D(2,2),\n","    tf.keras.layers.Conv2D(32,(3,3),activation = 'relu'),\n","    tf.keras.layers.MaxPooling2D(2,2),\n","    tf.keras.layers.Conv2D(64,(3,3),activation = 'relu'),\n","    tf.keras.layers.MaxPooling2D(2,2),\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(128,activation = 'relu'),\n","    tf.keras.layers.Dropout(0.2),\n","    tf.keras.layers.Dense(256,activation = 'relu'),\n","    tf.keras.layers.Dropout(0.3),\n","    tf.keras.layers.Dense(4,activation = 'softmax')\n","\n","],    name = 'Conv2D_Model')\n","\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"Conv2D_Model\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"Conv2D_Model\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m16\u001b[0m)        │             \u001b[38;5;34m448\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m121\u001b[0m, \u001b[38;5;34m121\u001b[0m, \u001b[38;5;34m16\u001b[0m)        │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m119\u001b[0m, \u001b[38;5;34m119\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │           \u001b[38;5;34m4,640\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m59\u001b[0m, \u001b[38;5;34m59\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m57\u001b[0m, \u001b[38;5;34m57\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50176\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m6,422,656\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │          \u001b[38;5;34m33,024\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)                   │           \u001b[38;5;34m1,028\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">121</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">121</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)        │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">119</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">119</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,640</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">59</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">59</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">57</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">57</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50176</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">6,422,656</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)                   │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,028</span> │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m6,480,292\u001b[0m (24.72 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6,480,292</span> (24.72 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m6,480,292\u001b[0m (24.72 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6,480,292</span> (24.72 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"metadata":{"trusted":true,"id":"hMDJwyQ0pwqm"},"cell_type":"code","source":["LEARNING_RATE = 0.001 #@param {type:\"number\"}\n","\n","model.compile(optimizer = tf.keras.optimizers.Adam(),\n","              loss = 'categorical_crossentropy',\n","              metrics = ['accuracy'])"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"3eWypGnNpwqm","executionInfo":{"status":"ok","timestamp":1728305810062,"user_tz":420,"elapsed":2536559,"user":{"displayName":"","userId":""}},"outputId":"93dbc139-4a2c-4348-f6b6-414f9b8c7f8c"},"cell_type":"code","source":["EPOCHS = 10  # Set the number of epochs\n","\n","history = model.fit(\n","    train_generator,\n","    steps_per_epoch=train_generator.samples // train_generator.batch_size,\n","    epochs=EPOCHS,\n","    validation_data=validation_generator,\n","    callbacks=[callbacks],\n","    validation_steps=validation_generator.samples // validation_generator.batch_size\n",")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m505s\u001b[0m 11s/step - accuracy: 0.3600 - loss: 1.5301 - val_accuracy: 0.4641 - val_loss: 1.2903\n","Epoch 2/10\n","\u001b[1m 1/41\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2:33\u001b[0m 4s/step - accuracy: 0.4688 - loss: 1.2788"]},{"output_type":"stream","name":"stderr","text":["/usr/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n","  self.gen.throw(typ, value, traceback)\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 435ms/step - accuracy: 0.4688 - loss: 1.2788 - val_accuracy: 0.0000e+00 - val_loss: 1.3171\n","Epoch 3/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m480s\u001b[0m 11s/step - accuracy: 0.4272 - loss: 1.2696 - val_accuracy: 0.4641 - val_loss: 1.3255\n","Epoch 4/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 418ms/step - accuracy: 0.4062 - loss: 1.2963 - val_accuracy: 0.0000e+00 - val_loss: 1.7019\n","Epoch 5/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m480s\u001b[0m 11s/step - accuracy: 0.4526 - loss: 1.2036 - val_accuracy: 0.4891 - val_loss: 1.4275\n","Epoch 6/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 390ms/step - accuracy: 0.5000 - loss: 1.0962 - val_accuracy: 0.0000e+00 - val_loss: 1.9220\n","Epoch 7/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m471s\u001b[0m 10s/step - accuracy: 0.5391 - loss: 1.1150 - val_accuracy: 0.1969 - val_loss: 1.6037\n","Epoch 8/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.5312 - loss: 1.1569 - val_accuracy: 0.0000e+00 - val_loss: 1.8935\n","Epoch 9/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m504s\u001b[0m 11s/step - accuracy: 0.5848 - loss: 1.0517 - val_accuracy: 0.2484 - val_loss: 1.8419\n","Epoch 10/10\n","\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 249ms/step - accuracy: 0.6250 - loss: 1.0600 - val_accuracy: 0.0000e+00 - val_loss: 1.8511\n"]}]},{"metadata":{"id":"p8Bq0JeHpwqn"},"cell_type":"markdown","source":["### Metrics <a name=\"MetricsConv2D\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":554},"id":"74h_21VRpwqn","executionInfo":{"status":"ok","timestamp":1728305812060,"user_tz":420,"elapsed":1516,"user":{"displayName":"","userId":""}},"outputId":"61970c1c-ca4a-4382-83a3-367d5fa03300"},"cell_type":"code","source":["import matplotlib.pylab as plt\n","import numpy as np\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs_range = range(EPOCHS)\n","\n","plt.figure(figsize=(20, 8))\n","plt.subplot(1, 2, 1)\n","plt.plot(epochs_range, acc, label='Training Accuracy')\n","plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')\n","plt.ylabel(\"Accuracy (training and validation)\")\n","plt.xlabel(\"Training Steps\")\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(epochs_range, loss, label='Training Loss')\n","plt.plot(epochs_range, val_loss, label='Validation Loss')\n","plt.legend(loc='upper right')\n","plt.title('Training and Validation Loss')\n","plt.ylabel(\"Loss (training and validation)\")\n","plt.xlabel(\"Training Steps\")\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"metadata":{"id":"TweOYcLypwqn"},"cell_type":"markdown","source":["#### Observing the Convolutions  <a name=\"ObservingConv2D\"></a>"]},{"metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"ISVP8zj6pwqn","executionInfo":{"status":"error","timestamp":1728306769761,"user_tz":420,"elapsed":723,"user":{"displayName":"","userId":""}},"outputId":"efcc92b7-6106-40f9-d8d6-14631bb1430d"},"cell_type":"code","source":["import numpy as np\n","import random\n","import os\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.preprocessing.image import img_to_array, load_img\n","from tensorflow.keras.models import Model\n","import tensorflow as tf\n","\n","# Assume 'model' is already defined, compiled, and trained.\n","\n","# First, let's ensure the model is built by making a prediction\n","dummy_input = np.random.random((1, 244, 244, 3))  # Adjust to match your model's input shape\n","_ = model.predict(dummy_input)  # Trigger the model to build\n","\n","# Create a list of successive outputs from the layers\n","successive_outputs = [layer.output for layer in model.layers]\n","\n","# Create the visualization model with the initialized model inputs and outputs\n","visualization_model = Model(inputs=model.input, outputs=successive_outputs)\n","\n","# Prepare a random input image from the training set\n","BrownSpot_img_files = [os.path.join(train_BrownSpot_dir, f) for f in train_BrownSpot_names]\n","Healthy_files = [os.path.join(train_Healthy_dir, f) for f in train_Healthy_names]\n","img_path = random.choice(BrownSpot_img_files + Healthy_files)\n","\n","# Load and preprocess the image\n","img = load_img(img_path, target_size=(244, 244))  # This is a PIL image\n","x = img_to_array(img)  # Numpy array with shape (244, 244, 3)\n","x = x.reshape((1,) + x.shape)  # Numpy array with shape (1, 244, 244, 3)\n","\n","# Rescale by 1/255\n","x /= 255\n","\n","# Run the image through our network to obtain intermediate representations\n","successive_feature_maps = visualization_model.predict(x)\n","\n","# Get the layer names for visualization\n","layer_names = [layer.name for layer in model.layers]\n","\n","# Now let's display our representations\n","for layer_name, feature_map in zip(layer_names, successive_feature_maps):\n","    if len(feature_map.shape) == 4:  # Only process conv/maxpool layers\n","        n_features = feature_map.shape[-1]  # Number of features in the feature map\n","        size = feature_map.shape[1]  # Feature map size\n","        display_grid = np.zeros((size, size * n_features))\n","\n","        for i in range(n_features):\n","            x = feature_map[0, :, :, i]\n","            x -= x.mean()\n","            x /= x.std()\n","            x *= 64\n","            x += 128\n","            x = np.clip(x, 0, 255).astype('uint8')\n","            display_grid[:, i * size:(i + 1) * size] = x\n","\n","        # Display the grid\n","        scale = 20. / n_features\n","        plt.figure(figsize=(scale * n_features, scale))\n","        plt.title(layer_name)\n","        plt.grid(False)\n","        plt.imshow(display_grid, aspect='auto', cmap='viridis')\n","        plt.axis('off')  # Optional: turn off axis\n","        plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 143ms/step\n"]},{"output_type":"error","ename":"ValueError","evalue":"The layer Conv2D_Model has never been called and thus has no defined input.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-0c0d2527822b>\u001b[0m in \u001b[0;36m<cell line: 19>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m# Create the visualization model with the initialized model inputs and outputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mvisualization_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msuccessive_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;31m# Prepare a random input image from the training set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/ops/operation.py\u001b[0m in \u001b[0;36minput\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    252\u001b[0m             \u001b[0mInput\u001b[0m \u001b[0mtensor\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mlist\u001b[0m \u001b[0mof\u001b[0m \u001b[0minput\u001b[0m \u001b[0mtensors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m         \"\"\"\n\u001b[0;32m--> 254\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_node_attribute_at_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"input_tensors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"input\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/ops/operation.py\u001b[0m in \u001b[0;36m_get_node_attribute_at_index\u001b[0;34m(self, node_index, attr, attr_name)\u001b[0m\n\u001b[1;32m    283\u001b[0m         \"\"\"\n\u001b[1;32m    284\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inbound_nodes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    286\u001b[0m                 \u001b[0;34mf\"The layer {self.name} has never been called \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m                 \u001b[0;34mf\"and thus has no defined {attr_name}.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The layer Conv2D_Model has never been called and thus has no defined input."]}]},{"metadata":{"id":"qGv_tzxFpwqo"},"cell_type":"markdown","source":["### 2.Model - Inception <a name=\"InceptionV3\"></a>"]},{"metadata":{"id":"wgcIBxKKpwqo"},"cell_type":"markdown","source":["#### Downloading Weights <a name=\"DownloadWeights\"></a>"]},{"metadata":{"trusted":true,"id":"D179Zfh6pwqo"},"cell_type":"code","source":["!wget --no-check-certificate \\\n","    https://storage.googleapis.com/mledu-datasets/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 \\\n","    -O /tmp/inception_v3_weights_tf.dim_ordering_tf_kernels.notop.h5"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"KUdDnN9Apwqo"},"cell_type":"code","source":["from tensorflow.keras import layers\n","from tensorflow.keras import Model\n","from tensorflow.keras.applications.inception_v3 import InceptionV3\n","local_weights_file = '/tmp/inception_v3_weights_tf.dim_ordering_tf_kernels.notop.h5'\n","\n","pre_trained_model = InceptionV3(\n","                                input_shape = (244,244,3),\n","                                include_top= False,\n","                                weights = None\n",")\n","\n","pre_trained_model.load_weights(local_weights_file)\n","\n","for layer in pre_trained_model.layers:\n","    layer.trainable = False\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"6N4HhVDGpwqo"},"cell_type":"code","source":["last_layer = pre_trained_model.get_layer('mixed7')\n","print(f'The shape of the last layer is {last_layer.output_shape}')\n","output_layer = last_layer.output"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"F9bmEpIYpwqo"},"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers\n","\n","x = tf.keras.layers.Flatten()(output_layer)\n","x = tf.keras.layers.Dense(512, activation='relu')(x)\n","x = tf.keras.layers.Dropout(0.4)(x)\n","#x = tf.keras.layers.Dropout(0.2)(x)\n","x = tf.keras.layers.Dense(4, activation='softmax')(x)\n","\n","model = Model(pre_trained_model.input, x,name=\"RiceLeafs_Inception_model\")"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"d5laKTvRpwqp"},"cell_type":"code","source":["LEARNING_RATE = 0.001 #@param {type:\"number\"}\n","\n","model.compile(optimizer = tf.keras.optimizers.RMSprop(lr = LEARNING_RATE),\n","              loss = 'categorical_crossentropy',\n","              metrics = ['accuracy'])"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"LiFG34eypwqp"},"cell_type":"code","source":["EPOCHS=10 #@param {type:\"integer\"}\n","\n","history = model.fit_generator(\n","        train_generator,\n","        steps_per_epoch=train_generator.samples//train_generator.batch_size,\n","        epochs=EPOCHS,\n","        validation_data=validation_generator,\n","        callbacks = [callbacks],\n","        validation_steps=validation_generator.samples//validation_generator.batch_size)"],"execution_count":null,"outputs":[]},{"metadata":{"id":"wZmZzUySpwqp"},"cell_type":"markdown","source":["#### Metrics <a name=\"MetricsInceptionv3\"></a>"]},{"metadata":{"trusted":true,"id":"Tf6UBz1ypwqp"},"cell_type":"code","source":["import matplotlib.pylab as plt\n","import numpy as np\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs_range = range(EPOCHS)\n","\n","plt.figure(figsize=(20, 8))\n","plt.subplot(1, 2, 1)\n","plt.plot(epochs_range, acc, label='Training Accuracy')\n","plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')\n","plt.ylabel(\"Accuracy (training and validation)\")\n","plt.xlabel(\"Training Steps\")\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(epochs_range, loss, label='Training Loss')\n","plt.plot(epochs_range, val_loss, label='Validation Loss')\n","plt.legend(loc='upper right')\n","plt.title('Training and Validation Loss')\n","plt.ylabel(\"Loss (training and validation)\")\n","plt.xlabel(\"Training Steps\")\n","plt.show()"],"execution_count":null,"outputs":[]},{"metadata":{"id":"xyiW-nvypwqq"},"cell_type":"markdown","source":["### 3. Model - EfficientNet v2 <a name=\"EfficientNet\"></a>"]},{"metadata":{"id":"OH-zXKeQpwqq"},"cell_type":"markdown","source":["#### TensorFlow Hub Dataset\n","- [EfficientNet B7](https://tfhub.dev/tensorflow/efficientnet/b7/feature-vector/1)"]},{"metadata":{"trusted":true,"id":"pyMAIc01pwqq"},"cell_type":"code","source":["import tensorflow as tf\n","import tensorflow_hub as hub\n","model = tf.keras.Sequential([\n","hub.KerasLayer(\"https://tfhub.dev/tensorflow/efficientnet/b7/feature-vector/1\"),\n","    tf.keras.layers.Dropout(0.2),\n","    tf.keras.layers.Dense(512, activation='relu'),\n","\n","  tf.keras.layers.Dense(train_generator.num_classes, activation='softmax')\n","])\n","\n","model.build([None, 244, 244, 3])"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"l33WP6WOpwqq"},"cell_type":"code","source":["#Compile model specifying the optimizer learning rate\n","\n","LEARNING_RATE = 0.0001 #@param {type:\"number\"}\n","\n","model.compile(\n","   optimizer=tf.keras.optimizers.Adam(lr=LEARNING_RATE),\n","   loss='categorical_crossentropy',\n","   metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"9nI8vhUNpwqq"},"cell_type":"code","source":["EPOCHS=10 #@param {type:\"integer\"}\n","\n","history = model.fit_generator(\n","        train_generator,\n","        steps_per_epoch=train_generator.samples//train_generator.batch_size,\n","        epochs=EPOCHS,\n","        validation_data=validation_generator,\n","        #callbacks = [callbacks],\n","        validation_steps=validation_generator.samples//validation_generator.batch_size)"],"execution_count":null,"outputs":[]},{"metadata":{"id":"sb7W8ZqFpwqq"},"cell_type":"markdown","source":["### Metrics <a name=\"MetricsEfficientv2\"></a>"]},{"metadata":{"trusted":true,"id":"GZJo1czipwqr"},"cell_type":"code","source":["import matplotlib.pylab as plt\n","import numpy as np\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs_range = range(EPOCHS)\n","\n","plt.figure(figsize=(20, 8))\n","plt.subplot(1, 2, 1)\n","plt.plot(epochs_range, acc, label='Training Accuracy')\n","plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')\n","plt.ylabel(\"Accuracy (training and validation)\")\n","plt.xlabel(\"Training Steps\")\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(epochs_range, loss, label='Training Loss')\n","plt.plot(epochs_range, val_loss, label='Validation Loss')\n","plt.legend(loc='upper right')\n","plt.title('Training and Validation Loss')\n","plt.ylabel(\"Loss (training and validation)\")\n","plt.xlabel(\"Training Steps\")\n","plt.show()"],"execution_count":null,"outputs":[]},{"metadata":{"id":"IfD9giZFpwqr"},"cell_type":"markdown","source":["# Predict"]},{"metadata":{"trusted":true,"id":"DZglO7icpwqr"},"cell_type":"code","source":["IMAGE_SHAPE[0]"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"VY7mhMdopwqr"},"cell_type":"code","source":["# Import OpenCV\n","import cv2\n","\n","# Utility\n","import itertools\n","import random\n","from collections import Counter\n","from glob import iglob\n","\n","\n","def load_image(filename):\n","    img = cv2.imread(os.path.join(data_dir, validation_dir, filename))\n","    img = cv2.resize(img,(IMAGE_SHAPE[0], IMAGE_SHAPE[1]) )\n","    img = img /255\n","\n","    return img\n","\n","\n","def predict(image):\n","    probabilities = model.predict(np.asarray([img]))[0]\n","    class_idx = np.argmax(probabilities)\n","\n","    return {classes[class_idx]: probabilities[class_idx]}"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"W0ZvbQCzpwqr"},"cell_type":"code","source":["for idx, filename in enumerate(random.sample(validation_generator.filenames, 5)):\n","    print(\"SOURCE: class: %s, file: %s\" % (os.path.split(filename)[0], filename))\n","\n","    img = load_image(filename)\n","    prediction = predict(img)\n","    print(\"PREDICTED: class: %s, confidence: %f\" % (list(prediction.keys())[0], list(prediction.values())[0]))\n","    plt.imshow(img)\n","    plt.figure(idx)\n","    plt.show()"],"execution_count":null,"outputs":[]},{"metadata":{"id":"0Fk9PsY0pwqr"},"cell_type":"markdown","source":["# Export as TensorFlowLITE <a name=\"TFLITE\"></a>"]},{"metadata":{"trusted":true,"id":"AzuL4J1ppwqs"},"cell_type":"code","source":["import time\n","t = time.time()\n","\n","export_path = \"/tmp/saved_models/{}\".format(int(t))\n","tf.keras.experimental.export_saved_model(model, export_path)\n","\n","export_path"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"11WrEdlGpwqs"},"cell_type":"code","source":["# Now confirm that we can reload it, and it still gives the same results\n","reloaded = tf.keras.experimental.load_from_saved_model(export_path, custom_objects={'KerasLayer':hub.KerasLayer}) # custom_objects depends on model"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"wABwlpcvpwqs"},"cell_type":"code","source":["# convert the model to TFLite\n","!mkdir \"tflite_models\"\n","TFLITE_MODEL = \"tflite_models/rice_leaf_disease.tflite\"\n","\n","\n","# Get the concrete function from the Keras model.\n","run_model = tf.function(lambda x : reloaded(x))\n","\n","# Save the concrete function.\n","concrete_func = run_model.get_concrete_function(\n","    tf.TensorSpec(model.inputs[0].shape, model.inputs[0].dtype)\n",")\n","\n","# Convert the model to standard TensorFlow Lite model\n","converter = tf.lite.TFLiteConverter.from_concrete_functions([concrete_func])\n","converted_tflite_model = converter.convert()\n","open(TFLITE_MODEL, \"wb\").write(converted_tflite_model)"],"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/rice-crop-disease-detection-using-tensorflow-4d88c4b4-5d67-44ca-bc65-c7ded24412ce.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20241007/auto/storage/goog4_request&X-Goog-Date=20241007T110423Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=7d9b7ebfe008fa81ef94b28dfdab1aae1d3654cd316d391bf4249be54a95e895af1a8f4cc2c21cd7438bfda78866d12a23b13ef2c11430287d91a04f85127c44fc6b905826903a9db482428c8e47d26095248e1dd6db6729783d7c01a3842861a53c14a3a6a9846fe3c4edee8080fb70638d047c6e0c3a1da69495052a9ce7d010bc88130cdd33ae0ffd45fdd135b52ef3b23a909107f9f6167e5db3bfdf6f78a96f2f1861c89b7d26f6084b50a27b70b709611b1b9641fef2c8102b8ee106e9217a813b6692d9d6afbc2992f96c30db5049d4e0ff3f43751eaa28f7a12ac7f900503df7132a60d0e0042a1cd78a5d4341c8ffd6b49e37e990c2b1bb984f1f9f","timestamp":1728306815968}]}},"nbformat":4,"nbformat_minor":0}